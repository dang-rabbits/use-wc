{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/elements/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-dropdown/use-dropdown.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<UseDropdown>"
          },
          "default": "{ component: 'use-dropdown', title: 'Web Components/use-dropdown', tags: ['autodocs', '!dev'], args: { disabled: false, }, render: (args) => { return html` <use-dropdown ?disabled=${args.disabled} label=\"Dropdown\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> <a role=\"menuitem\" href=\"https://usewc.com/\">Use WC</a> </use-dropdown> `; }, }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{ parameters: { showPanel: false, } }"
        },
        {
          "kind": "variable",
          "name": "Inert",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { return html` <use-dropdown label=\"inert dropdown\" inert> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> <a role=\"menuitem\" href=\"https://usewc.com/\">Use WC</a> </use-dropdown> `; } }"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { disabled: true }, }"
        },
        {
          "kind": "variable",
          "name": "NestedMenus",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-dropdown label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> <use-dropdown label=\"Neste menu\"> <button role=\"menuitem\">nested menu item 1</button> <button role=\"menuitem\">nested menu item 2</button> <button role=\"menuitem\">nested menu item 3</button> </use-dropdown> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "Groups",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-dropdown label=\"Menu\"> <div role=\"group\" aria-label=\"Group\"> <div>Group</div> <button role=\"menuitem\">group item 1</button> <button role=\"menuitem\">group item 2</button> <button role=\"menuitem\">group item 3</button> </div> <div role=\"group\" aria-label=\"Group\"> <div>Group</div> <button role=\"menuitem\">group item 1</button> <button role=\"menuitem\">group item 2</button> <button role=\"menuitem\">group item 3</button> </div> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "Dividers",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-dropdown label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <hr /> <button role=\"menuitem\">menu item 3</button> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "DisabledItems",
          "type": {
            "text": "Story"
          },
          "default": "{ parameters: { docs: { description: 'Screen reader users will need to know of disabled items. Use `aria-disabled=\"true\"` to indicate that an item is disabled and disable the `click` event handler within the callback directly.' }, }, render: () => html` <use-dropdown label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\" aria-disabled=\"true\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "CustomAccessibleItems",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-dropdown label=\"Menu\"> <div role=\"menuitem\" onclick=\"alert('hello')\">menu item 1</div> <div role=\"menuitem\" onclick=\"alert('hello')\">menu item 2</div> <div role=\"menuitem\" onclick=\"alert('hello')\">menu item 3</div> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "CustomTriggerContent",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-dropdown> <svg slot=\"picker-content\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" aria-label=\"Menu\"> <rect y=\"2\" width=\"24\" height=\"2\" fill=\"currentColor\"/> <rect y=\"11\" width=\"24\" height=\"2\" fill=\"currentColor\"/> <rect y=\"20\" width=\"24\" height=\"2\" fill=\"currentColor\"/> </svg> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "CustomItemLayout",
          "type": {
            "text": "Story"
          },
          "default": "{ parameters: { docs: { description: 'This is inspired by Edge and Chrome browser main menu dropdown. The Zoom In and Zoom Out buttons are grouped together in a horizontal layout but still accessible with the standard up and down arrow keys.' } }, render: () => html` <use-dropdown label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <hr /> <div style=\"display: flex; justify-content: space-between; width: 100vw; max-width: 200px;\"> <div id=\"custom-menu-layout-item-label\">Zoom</div> <div style=\"display: inline-flex; gap: 8px; align-items: center;\"> <button role=\"menuitem\" menu-item=\"keep-open\" aria-label=\"Zoom Out\">-</button> <div>100%</div> <button role=\"menuitem\" menu-item=\"keep-open\" aria-label=\"Zoom In\">+</button> </div> </div> <hr /> <div style=\"display: flex; gap: 8px; width: 100vw; max-width: 200px;\"> <button role=\"menuitem\" style=\"flex: 1 1 auto;\">menu item 3</button> <use-dropdown> <div slot=\"trigger-content\">▶</div> <button role=\"menuitem\">nested menu item 1</button> <button role=\"menuitem\">nested menu item 2</button> <button role=\"menuitem\">nested menu item 3</button> </use-dropdown> </div> </use-dropdown> `, }"
        },
        {
          "kind": "variable",
          "name": "CheckboxSelect",
          "type": {
            "text": "Story"
          },
          "default": "{ parameters: { docs: { descrption: 'https://www.w3.org/WAI/ARIA/apg/patterns/menubar/examples/menubar-editor/' } }, render: () => html` <use-dropdown label=\"Checkbox options\"> <button role=\"menuitemcheckbox\" aria-checked=\"true\" type=\"button\">✅ option 1</button> <button role=\"menuitemcheckbox\" aria-checked=\"false\" type=\"button\">option 2</button> <button role=\"menuitemcheckbox\" aria-checked=\"false\" type=\"button\">option 3</button> </use-dropdown> ` }"
        },
        {
          "kind": "variable",
          "name": "RadioSelect",
          "type": {
            "text": "Story"
          },
          "default": "{ parameters: { docs: { descrption: 'https://www.w3.org/WAI/ARIA/apg/patterns/menubar/examples/menubar-editor/' } }, render: () => html` <use-dropdown label=\"Radio options\"> <button role=\"menuitemradio\" aria-checked=\"true\" type=\"button\">✅ option 1</button> <button role=\"menuitemradio\" aria-checked=\"false\" type=\"button\">option 2</button> <button role=\"menuitemradio\" aria-checked=\"false\" type=\"button\">option 3</button> </use-dropdown> ` }"
        },
        {
          "kind": "variable",
          "name": "InjectedItems",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { function injectItems() { const dropdown = document.getElementById('inject-dropdown'); if (dropdown) { dropdown.innerHTML = dropdown.innerHTML + ` <button role=\"menuitem\">injected item 1</button> <button role=\"menuitem\">injected item 2</button> <button role=\"menuitem\">injected item 3</button> `; } } return html` <use-dropdown id=\"inject-dropdown\" label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> </use-dropdown> <button type=\"button\" @click=${injectItems}>Inject items</button> `; }, }"
        },
        {
          "kind": "variable",
          "name": "CustomStyles",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <style> .custom-use-dropdown::part(picker), .custom-use-dropdown::part(popover) { background-color: blanchedalmond; color: orangered; border: 2px solid orangered; border-radius: 6px; padding: 4px; box-shadow: 1px 1px 0 orangered, 2px 2px 0 orangered, 3px 3px 0 orangered; font-size: 16px; font-weight: 700; } .custom-use-dropdown::part(picker):focus-visible { outline: 2px dashed currentColor; outline-offset: 4px; box-shadow: none; } .custom-use-dropdown::part(picker):is(:hover, :focus) { background-color: orangered; color: blanchedalmond; } .custom-use-dropdown :is(button, a) { all: unset; box-sizing: border-box; display: block; width: 100%; font-weight: 400; border-radius: 6px; padding: 4px; cursor: default; &:is(:hover, :focus) { background-color: orangered; color: blanchedalmond; } } .custom-use-dropdown hr { margin: 4px 0; border: none; border-top: 2px dotted orangered; } </style> <use-dropdown class=\"custom-use-dropdown\" label=\"Menu\"> <button role=\"menuitem\">menu item 1</button> <button role=\"menuitem\">menu item 2</button> <button role=\"menuitem\">menu item 3</button> <hr /> <a role=\"menuitem\" href=\"#\">Example link 1</a> <a role=\"menuitem\" href=\"#\">Example link 2</a> </use-dropdown> `, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inert",
          "declaration": {
            "name": "Inert",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "NestedMenus",
          "declaration": {
            "name": "NestedMenus",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Groups",
          "declaration": {
            "name": "Groups",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dividers",
          "declaration": {
            "name": "Dividers",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledItems",
          "declaration": {
            "name": "DisabledItems",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomAccessibleItems",
          "declaration": {
            "name": "CustomAccessibleItems",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomTriggerContent",
          "declaration": {
            "name": "CustomTriggerContent",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomItemLayout",
          "declaration": {
            "name": "CustomItemLayout",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CheckboxSelect",
          "declaration": {
            "name": "CheckboxSelect",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "RadioSelect",
          "declaration": {
            "name": "RadioSelect",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "InjectedItems",
          "declaration": {
            "name": "InjectedItems",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomStyles",
          "declaration": {
            "name": "CustomStyles",
            "module": "src/elements/use-dropdown/use-dropdown.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-dropdown/use-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "When the popover is opened the tabbable elements are found and indexed for keyboard navigation. The first tabbable element is focused when the popover is opened. The following selector is used to find tabbable elements:\n\n```css\n:is([role=\"menuitem\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"], use-dropdown):not([disabled])\n```",
          "name": "UseDropdown",
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "trigger-content"
            },
            {
              "name": "trigger-label"
            },
            {
              "name": "trigger-arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getId"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseDropdown",
          "declaration": {
            "name": "UseDropdown",
            "module": "src/elements/use-dropdown/use-dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-dropdown",
          "declaration": {
            "name": "UseDropdown",
            "module": "src/elements/use-dropdown/use-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-focusgroup/use-focusgroup.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<UseFocusgroup>"
          },
          "default": "{ component: 'use-focusgroup', title: 'Web Components/use-focusgroup', tags: ['autodocs', '!dev'], args: {}, render: (args: UseFocusgroup) => { return html` <use-focusgroup> <button>hello</button> <button>hello</button> <button>hello</button> </use-focusgroup> `; }, }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "Polyfill",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <div focusgroup=\"inline\"> <button>hello</button> <button>hello</button> <use-widget> <input /> </use-widget> <use-select> <use-option>hello</use-option> </use-select> <button>hello</button> </div> `, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/elements/use-focusgroup/use-focusgroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/elements/use-focusgroup/use-focusgroup.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Polyfill",
          "declaration": {
            "name": "Polyfill",
            "module": "src/elements/use-focusgroup/use-focusgroup.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-focusgroup/use-focusgroup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`use-focusgroup` is a polyfill for the proposed focusgroup attribute.",
          "name": "UseFocusgroup",
          "slots": [
            {}
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-focusgroup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseFocusgroup",
          "declaration": {
            "name": "UseFocusgroup",
            "module": "src/elements/use-focusgroup/use-focusgroup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-focusgroup",
          "declaration": {
            "name": "UseFocusgroup",
            "module": "src/elements/use-focusgroup/use-focusgroup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-listbox/use-listbox.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<UseListbox>"
          },
          "default": "{ component: 'use-listbox', subcomponents: { 'use-option': 'use-option' }, title: 'Web Components/use-listbox', tags: ['autodocs', '!dev'], args: { placeholder: 'Select a number', disabled: false, multiple: false, name: 'example', }, render: (args: UseListbox) => { return html` <use-listbox name=${args.name} placeholder=${args.placeholder} ?disabled=${args.disabled} ?multiple=${args.multiple} > <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> </use-listbox> `; }, }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { disabled: true, } }"
        },
        {
          "kind": "variable",
          "name": "Placeholder",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { placeholder: 'Select a number', } }"
        },
        {
          "kind": "variable",
          "name": "DisabledOption",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-listbox> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\" disabled>Two</use-option> <use-option value=\"3\" id=\"option-3\">Three</use-option> </use-listbox> `, }"
        },
        {
          "kind": "variable",
          "name": "Multiple",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-listbox multiple> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> <use-option value=\"3\" id=\"option-3\">Three</use-option> </use-listbox> `, }"
        },
        {
          "kind": "variable",
          "name": "OptionsDivider",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-listbox> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> <hr /> <use-option value=\"3\" id=\"option-3\">Three</use-option> </use-listbox> `, }"
        },
        {
          "kind": "variable",
          "name": "FormSingleValue",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { function handleFormSubmit(e: Event) { e.preventDefault(); const form = e.target as HTMLFormElement; const formData = new FormData(form); const jsonData = JSON.stringify(Object.fromEntries(formData), null, 2); const formOutput = document.querySelector('#form-data'); if (formOutput) { formOutput.textContent = jsonData; } } return html` <form @submit=${handleFormSubmit}> <div> <label for=\"favorite-fruit\">Favorite fruit:</label><br /> <use-listbox id=\"favorite-fruit\" name=\"favorite-fruit\"> <use-option value=\"apple\" id=\"apple\">Apple</use-option> <use-option value=\"banana\" id=\"banana\">Banana</use-option> <use-option value=\"cherry\" id=\"cherry\">Cherry</use-option> </use-listbox> </div> <button>Submit</button> </form> <hr /> <h6>Payload</h6> <pre id=\"form-data\"></pre> `; }, }"
        },
        {
          "kind": "variable",
          "name": "FormMultipleValues",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { function handleFormSubmit(e: Event) { e.preventDefault(); const form = e.target as HTMLFormElement; const formData = new FormData(form); const queryString = decodeURIComponent(new URLSearchParams(formData as any).toString()); const formOutput = document.querySelector('#form-data-multiple'); if (formOutput) { formOutput.textContent = queryString; } } return html` <form @submit=${handleFormSubmit}> <div> <label for=\"favorite-fruits\">Favorite fruits:</label><br /> <use-listbox id=\"favorite-fruits\" name=\"favorite-fruits[]\" multiple> <use-option value=\"apple\" id=\"apple\">Apple</use-option> <use-option value=\"banana\" id=\"banana\">Banana</use-option> <use-option value=\"cherry\" id=\"cherry\">Cherry</use-option> </use-listbox> </div> <button>Submit</button> </form> <hr /> <h6>Payload</h6> <pre id=\"form-data-multiple\"></pre> `; }, }"
        },
        {
          "kind": "variable",
          "name": "CustomSelectedIndicatorSlot",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-listbox> <svg slot=\"trigger-arrow\" fill=\"currentColor\" viewBox='0 0 140 140' width='12' height='12' xmlns='http://www.w3.org/2000/svg'> <g> <path d='m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z' /> </g> </svg> <use-option value=\"1\" id=\"option-1\" selected> <span slot=\"selected-indicator\">🔥</span> Fire </use-option> <use-option value=\"2\" id=\"option-2\"> <span slot=\"selected-indicator\">🌊</span> Water </use-option> </use-listbox> ` }"
        },
        {
          "kind": "variable",
          "name": "CustomStyles",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <style> .custom-use-listbox { background-color: blanchedalmond; color: orangered; border: 2px solid orangered; border-radius: 6px; padding: 4px; box-shadow: 1px 1px 0 orangered, 2px 2px 0 orangered, 3px 3px 0 orangered; font-size: 16px; font-weight: 700; letter-spacing: 2px; } .custom-use-listbox use-option { border-radius: 2px; padding: 4px 8px; line-height: 24px; } .custom-use-listbox use-option::part(selected-indicator-default) { display: none; } .custom-use-listbox use-option::part(selected-indicator)::before { content: \"\\\\1F525\"; margin-inline-end: 8px; } .custom-use-listbox:not(:has(use-option:hover)):focus use-option:state(active), .custom-use-listbox use-option:not(:state(disabled)):hover { background-color: orangered; color: blanchedalmond; } .custom-use-listbox::part(listbox):focus-visible { outline: 2px dashed currentColor; outline-offset: 4px; box-shadow: none; } </style> <use-listbox class=\"custom-use-listbox\"> <use-option value=\"1\" id=\"option-1\">Overcompensate</use-option> <use-option value=\"2\" id=\"option-2\" selected>Routines In The Night</use-option> <use-option value=\"3\" id=\"option-3\">Paladin Strait</use-option> </use-listbox> ` }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Placeholder",
          "declaration": {
            "name": "Placeholder",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledOption",
          "declaration": {
            "name": "DisabledOption",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Multiple",
          "declaration": {
            "name": "Multiple",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OptionsDivider",
          "declaration": {
            "name": "OptionsDivider",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormSingleValue",
          "declaration": {
            "name": "FormSingleValue",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormMultipleValues",
          "declaration": {
            "name": "FormMultipleValues",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomSelectedIndicatorSlot",
          "declaration": {
            "name": "CustomSelectedIndicatorSlot",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomStyles",
          "declaration": {
            "name": "CustomStyles",
            "module": "src/elements/use-listbox/use-listbox.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-listbox/use-listbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UseListbox",
          "slots": [
            {
              "description": "NodeList of `use-option` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "UseOption[]",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<UseOption>"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-listbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseListbox",
          "declaration": {
            "name": "UseListbox",
            "module": "src/elements/use-listbox/use-listbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-listbox",
          "declaration": {
            "name": "UseListbox",
            "module": "src/elements/use-listbox/use-listbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-options/use-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`use-option` is a custom element that represents an option in a `use-select` custom element.\n\nThe children of this element are the content of the option and must not contain any interactive elements.",
          "name": "UseOption",
          "slots": [
            {
              "name": "selected-indicator"
            },
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "value",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "toggleSelected"
            },
            {
              "kind": "method",
              "name": "setActive",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseOption",
          "declaration": {
            "name": "UseOption",
            "module": "src/elements/use-options/use-option.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-option",
          "declaration": {
            "name": "UseOption",
            "module": "src/elements/use-options/use-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-select/use-select.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<UseSelect>"
          },
          "default": "{ component: 'use-select', subcomponents: { 'use-option': 'use-option' }, title: 'Web Components/use-select', tags: ['autodocs', '!dev'], args: { placeholder: 'Select a number', disabled: false, name: 'example', }, render: (args: UseSelect) => { return html` <use-select name=${args.name} placeholder=${args.placeholder} ?disabled=${args.disabled} > <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> </use-select> `; }, }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "Disabled",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { disabled: true, } }"
        },
        {
          "kind": "variable",
          "name": "Placeholder",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { placeholder: 'Select a number', } }"
        },
        {
          "kind": "variable",
          "name": "DisabledOptions",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-select> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\" disabled>Two</use-option> <use-option value=\"3\" id=\"option-3\">Three</use-option> </use-select> `, }"
        },
        {
          "kind": "variable",
          "name": "OptionsDividers",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-select> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <hr /> <use-option value=\"2\" id=\"option-2\">Two</use-option> <hr /> <use-option value=\"3\" id=\"option-3\">Three</use-option> </use-select> `, }"
        },
        {
          "kind": "variable",
          "name": "Form",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { function handleFormSubmit(e: Event) { e.preventDefault(); const form = e.target as HTMLFormElement; const formData = new FormData(form); const jsonData = JSON.stringify(Object.fromEntries(formData), null, 2); const formOutput = document.querySelector('#form-data'); if (formOutput) { formOutput.textContent = jsonData; } } return html` <form @submit=${handleFormSubmit}> <div> <label for=\"favorite-fruit\">Favorite fruit:</label><br /> <use-select id=\"favorite-fruit\" name=\"favorite-fruit\" placeholder=\"Select one...\"> <use-option value=\"apple\" id=\"apple\">Apple</use-option> <use-option value=\"banana\" id=\"banana\">Banana</use-option> <use-option value=\"cherry\" id=\"cherry\">Cherry</use-option> </use-select> </div> <button>Submit</button> </form> <hr /> <h6>Payload</h6> <pre id=\"form-data\"></pre> `; }, }"
        },
        {
          "kind": "variable",
          "name": "CustomArrowViaSlot",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <use-select> <svg slot=\"trigger-arrow\" fill=\"currentColor\" viewBox='0 0 140 140' width='12' height='12' xmlns='http://www.w3.org/2000/svg'> <g> <path d='m121.3,34.6c-1.6-1.6-4.2-1.6-5.8,0l-51,51.1-51.1-51.1c-1.6-1.6-4.2-1.6-5.8,0-1.6,1.6-1.6,4.2 0,5.8l53.9,53.9c0.8,0.8 1.8,1.2 2.9,1.2 1,0 2.1-0.4 2.9-1.2l53.9-53.9c1.7-1.6 1.7-4.2 0.1-5.8z' /> </g> </svg> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> </use-select> ` }"
        },
        {
          "kind": "variable",
          "name": "CustomStyles",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => html` <style> .custom-use-select { font-family: sans-serif; } .custom-use-select::part(trigger) { all: unset; display: inline-flex; align-items: center; border: 2px solid light-dark(#ccc, #999); padding: .25rem 1rem; border-radius: 50px; gap: 2rem; } .custom-use-select::part(trigger):hover { background-color: rgba(0, 255, 0, 0.05); } .custom-use-select::part(trigger):focus-visible { outline: 2px dotted light-dark(#000, #fff); outline-offset: 2px; } .custom-use-select::part(trigger-label) { color: green; } .custom-use-select::part(trigger-arrow) { color: light-dark(darkgreen, lightgreen); } </style> <use-select class=\"custom-use-select\"> <use-option value=\"1\" id=\"option-1\" selected>One</use-option> <use-option value=\"2\" id=\"option-2\">Two</use-option> </use-select> ` }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Placeholder",
          "declaration": {
            "name": "Placeholder",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "DisabledOptions",
          "declaration": {
            "name": "DisabledOptions",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "OptionsDividers",
          "declaration": {
            "name": "OptionsDividers",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Form",
          "declaration": {
            "name": "Form",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomArrowViaSlot",
          "declaration": {
            "name": "CustomArrowViaSlot",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomStyles",
          "declaration": {
            "name": "CustomStyles",
            "module": "src/elements/use-select/use-select.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-select/use-select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "## Multiple\n\nThe `use-listbox` provides an attribute for selecting multiple options.",
          "name": "UseSelect",
          "slots": [
            {
              "description": "NodeList of `use-option` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<UseOption>"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseSelect",
          "declaration": {
            "name": "UseSelect",
            "module": "src/elements/use-select/use-select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-select",
          "declaration": {
            "name": "UseSelect",
            "module": "src/elements/use-select/use-select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-tree/use-tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UseTree",
          "slots": [
            {
              "description": "NodeList of `use-option` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "UseOption[]",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<UseOption>"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseTree",
          "declaration": {
            "name": "UseTree",
            "module": "src/elements/use-tree/use-tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-tree",
          "declaration": {
            "name": "UseTree",
            "module": "src/elements/use-tree/use-tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-widget/use-widget.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<UseWidget>"
          },
          "default": "{ component: 'use-widget', title: 'Web Components/use-widget', tags: ['autodocs', '!dev'], args: {}, render: () => { return html` <style> use-widget { display: block; border: 1px solid light-dark(rgba(0,0,0,.25), rgba(255,255,255,.25)); padding: 1rem; margin: 1rem; } </style> <use-widget aria-label=\"widget one\"> <button>hello</button> <button>hello</button> <input /> <button>hello</button> </use-widget> <use-widget aria-label=\"widget two\"> <button>hello</button> <div> <use-listbox> <use-option>hello</use-option> <use-option>hello</use-option> <use-option>hello</use-option> </use-listbox> </div> <button>hello</button> </use-widget> <use-widget aria-label=\"widget three\"> <button>hello</button> <button>hello</button> <button>hello</button> </use-widget> `; }, }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        },
        {
          "kind": "variable",
          "name": "Inert",
          "type": {
            "text": "Story"
          },
          "default": "{ render: () => { return html` <use-widget aria-label=\"inert widget\" inert> <button>hello</button> <button>hello</button> <input /> <button>hello</button> </use-widget> `; } }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/elements/use-widget/use-widget.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/elements/use-widget/use-widget.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inert",
          "declaration": {
            "name": "Inert",
            "module": "src/elements/use-widget/use-widget.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-widget/use-widget.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Nested controls are removed from the tab flow until the user activates the widget with `Enter` or `F2`. Clicking on a control will also activate the widget. Widgets are deactivated with `Escape` or `F2` keys or when the user clicks outside of the widget.\n\n`use-widget` can be used for easily navigating customizable dashboard widgets that contain multiple interactive elements. It can also be used for table and grid cells that contain multiple interactive elements, as described in the [WCAG Grid Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/grid/).\n\n## To do\n\n- [ ] Convert to a standard web component instead of LitElement\n- [ ] implement Arrow Key navigation for tabbable elements when activated\n\n## Sources\n\n- [tabbable](https://www.npmjs.com/package/tabbable)\n- [Grid (Interactive Tabular Data and Layout Containers) Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/grid/)",
          "name": "UseWidget",
          "slots": [
            {}
          ],
          "members": [
            {
              "kind": "method",
              "name": "initializeWidget"
            },
            {
              "kind": "method",
              "name": "enableWidget",
              "parameters": [
                {
                  "name": "autofocus",
                  "default": "true",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disableWidget",
              "parameters": [
                {
                  "name": "returnFocus",
                  "default": "true",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-widget",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseWidget",
          "declaration": {
            "name": "UseWidget",
            "module": "src/elements/use-widget/use-widget.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-widget",
          "declaration": {
            "name": "UseWidget",
            "module": "src/elements/use-widget/use-widget.ts"
          }
        }
      ]
    }
  ]
}
