{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/elements/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-dropdown/use-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "When the popover is opened the tabbable elements are found and indexed for keyboard navigation. The first tabbable element is focused when the popover is opened. The following selector is used to find tabbable elements:\n\n```css\n:is([role=\"menuitem\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"], use-dropdown):not([disabled])\n```",
          "name": "UseDropdown",
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "trigger-content"
            },
            {
              "name": "trigger-label"
            },
            {
              "name": "trigger-arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getId"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseDropdown",
          "declaration": {
            "name": "UseDropdown",
            "module": "src/elements/use-dropdown/use-dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-dropdown",
          "declaration": {
            "name": "UseDropdown",
            "module": "src/elements/use-dropdown/use-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-focusgroup/use-focusgroup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Nested controls are removed from the tab flow until the user navigates the nested controls with arrow keys.\n\n`use-focusgroup` is most useful for things like WYSIWYG toolbars, sets of tabs, or lists of navigation links (like a list of emails in a master detail layout).\n\n## To do\n\n- [ ] add `grid` navigation feature\n- [ ] add `autofocus` attribute support\n\n## Long term plan\n\nThis web component was built with the intent to be replaced by browser-native focusgroup support once it becomes baseline. Hopefully migration will be as simple as changing the tag name from `use-focusgroup` to `div` and the `options` attribute to `focusgroup`.\n\n<baseline-status featureId=\"focusgroup_attribute\"></baseline-status>\n\n## Sources\n\n- [Open UI focusgroup Explainer](https://open-ui.org/components/focusgroup.explainer/)\n- [tabbable](https://www.npmjs.com/package/tabbable)\n- [Toolbar Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/)\n- [@gfellerph/focusgroup-polyfill](https://github.com/gfellerph/focusgroup-polyfill)",
          "name": "UseFocusgroup",
          "members": [
            {
              "kind": "field",
              "name": "features",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A list of space-separated features that can be used to customize the behavior of the focusgroup.\n\nThe following options are available:\n\n- `inline` opts into keyboard navigation via left and right arrow keys\n- `block` opts into keyboard navigation via up and down arrow keys\n- `wrap` arrow navigation should wrap around when reaching the end\n- `no-memory` whether the focusgroup should not remember the last focused element\n\nIf nothing if neither `inline` nor `block` is specified, both are assumed.",
              "attribute": "features"
            },
            {
              "kind": "field",
              "name": "focusedElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null",
              "description": "The most recently focused element in the focusgroup."
            },
            {
              "kind": "method",
              "name": "focus"
            },
            {
              "kind": "field",
              "name": "promoted",
              "description": "Whether the use-focusgroup is promoted to the top of the tab order inside a parent use-focusgroup.",
              "readonly": true,
              "default": "false"
            },
            {
              "kind": "method",
              "name": "promote",
              "description": "Promotes the use-focusgroup to the top of the tab order inside a parent use-focusgroup."
            }
          ],
          "attributes": [
            {
              "name": "features",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A list of space-separated features that can be used to customize the behavior of the focusgroup.\n\nThe following options are available:\n\n- `inline` opts into keyboard navigation via left and right arrow keys\n- `block` opts into keyboard navigation via up and down arrow keys\n- `wrap` arrow navigation should wrap around when reaching the end\n- `no-memory` whether the focusgroup should not remember the last focused element\n\nIf nothing if neither `inline` nor `block` is specified, both are assumed.",
              "fieldName": "features"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "use-focusgroup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseFocusgroup",
          "declaration": {
            "name": "UseFocusgroup",
            "module": "src/elements/use-focusgroup/use-focusgroup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-focusgroup",
          "declaration": {
            "name": "UseFocusgroup",
            "module": "src/elements/use-focusgroup/use-focusgroup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-listbox/use-listbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UseListbox",
          "slots": [
            {
              "description": "NodeList of `use-option` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "UseOption[]",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<UseOption>"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-listbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseListbox",
          "declaration": {
            "name": "UseListbox",
            "module": "src/elements/use-listbox/use-listbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-listbox",
          "declaration": {
            "name": "UseListbox",
            "module": "src/elements/use-listbox/use-listbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-menu/use-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "When the popover is opened the tabbable elements are found and indexed for keyboard navigation. The first tabbable element is focused when the popover is opened. The following selector is used to find tabbable elements:\n\n```css\n:is([role=\"menuitem\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"], use-menu):not([disabled])\n```",
          "name": "UseMenu",
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "trigger-content"
            },
            {
              "name": "trigger-label"
            },
            {
              "name": "trigger-arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getId"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseMenu",
          "declaration": {
            "name": "UseMenu",
            "module": "src/elements/use-menu/use-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-menu",
          "declaration": {
            "name": "UseMenu",
            "module": "src/elements/use-menu/use-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-option/use-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`use-option` is a custom element that represents an option in a `use-select` custom element.\n\nThe children of this element are the content of the option and must not contain any interactive elements.",
          "name": "UseOption",
          "slots": [
            {
              "name": "selected-indicator"
            },
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "value",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "toggleSelected"
            },
            {
              "kind": "method",
              "name": "setActive",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseOption",
          "declaration": {
            "name": "UseOption",
            "module": "src/elements/use-option/use-option.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-option",
          "declaration": {
            "name": "UseOption",
            "module": "src/elements/use-option/use-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-select/use-select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "## Multiple\n\nThe `use-listbox` provides an attribute for selecting multiple options.\n\n## Long term plan\n\nThis web component was built with the intent to be replaced by browser-native `base-select` support once it becomes baseline.\n\n<baseline-status featureId=\"base-select\"></baseline-status>",
          "name": "UseSelect",
          "slots": [
            {
              "description": "NodeList of `use-option` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Array<UseOption>"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "HTMLSpanElement"
              }
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              },
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseSelect",
          "declaration": {
            "name": "UseSelect",
            "module": "src/elements/use-select/use-select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-select",
          "declaration": {
            "name": "UseSelect",
            "module": "src/elements/use-select/use-select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-tree/use-tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Custom input control for managing selected values in a hierarchy.",
          "name": "UseTree",
          "slots": [
            {
              "description": "NodeList of `use-treeitem` elements",
              "name": "default"
            },
            {
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "UseTreeItem[]",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<UseTreeitem>"
              }
            },
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "lazyItems",
              "type": {
                "text": "Array<UseTreeitem>"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "getId"
            },
            {
              "kind": "field",
              "name": "activeOption"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData"
              }
            },
            {
              "kind": "method",
              "name": "lazyQueryItems"
            },
            {
              "kind": "method",
              "name": "queryLazyAvailableItems"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseTree",
          "declaration": {
            "name": "UseTree",
            "module": "src/elements/use-tree/use-tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-tree",
          "declaration": {
            "name": "UseTree",
            "module": "src/elements/use-tree/use-tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-treeitem/use-treeitem.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`use-option` is a custom element that represents an option in a `use-select` custom element.\n\nThe children of this element are the content of the option and must not contain any interactive elements.\n\n## To Do\n\n- [ ] When the parent is no longer disabled, update the items without their own `[disabled]`",
          "name": "UseTreeitem",
          "slots": [
            {
              "name": "selected-indicator"
            },
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "expanded",
              "attribute": "expanded"
            },
            {
              "kind": "field",
              "name": "value",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "toggleSelected"
            },
            {
              "kind": "method",
              "name": "toggle"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "expanded",
              "fieldName": "expanded"
            },
            {
              "name": "value",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-treeitem",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseTreeitem",
          "declaration": {
            "name": "UseTreeitem",
            "module": "src/elements/use-treeitem/use-treeitem.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-treeitem",
          "declaration": {
            "name": "UseTreeitem",
            "module": "src/elements/use-treeitem/use-treeitem.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/use-widget/use-widget.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Nested controls are removed from the tab flow until the user activates the widget with `Enter` or `F2`. Clicking on a control will also activate the widget. Widgets are deactivated with `Escape` or `F2` keys or when the user clicks outside of the widget.\n\n`use-widget` can be used for easily navigating customizable dashboard widgets that contain multiple interactive elements. It can also be used for table and grid cells that contain multiple interactive elements, as described in the [WCAG Grid Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/grid/).\n\n## To do\n\n- [ ] Convert to a standard web component instead of LitElement\n- [ ] implement Arrow Key navigation for tabbable elements when activated\n\n## Sources\n\n- [tabbable](https://www.npmjs.com/package/tabbable)\n- [Grid (Interactive Tabular Data and Layout Containers) Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/grid/)",
          "name": "UseWidget",
          "slots": [
            {}
          ],
          "members": [
            {
              "kind": "method",
              "name": "initializeWidget"
            },
            {
              "kind": "method",
              "name": "enableWidget",
              "parameters": [
                {
                  "name": "autofocus",
                  "default": "true",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "disableWidget",
              "parameters": [
                {
                  "name": "returnFocus",
                  "default": "true",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "use-widget",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseWidget",
          "declaration": {
            "name": "UseWidget",
            "module": "src/elements/use-widget/use-widget.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "use-widget",
          "declaration": {
            "name": "UseWidget",
            "module": "src/elements/use-widget/use-widget.ts"
          }
        }
      ]
    }
  ]
}
